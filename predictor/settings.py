"""
Django settings for predictor project.
Generated by 'django-admin startproject' using Django 5.0.
For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from pathlib import Path
import os
from dotenv import load_dotenv
from corsheaders.defaults import default_headers  # ←

# Carga las variables del archivo .env en la raíz del proyecto
load_dotenv(os.path.join(Path(__file__).resolve().parent.parent, '.env'))

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-wl%9)v)rt7ol#b$r!_3rpte%ph__@@8sbr7^411ks9uv+i@^!k'

# Para desarrollo local, puedes activar DEBUG vía .env
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',')

INSTALLED_APPS = [
    'corsheaders',                   # ← habilita django-cors-headers
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_spectacular',
    'rest_framework',
    'api',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',      # ← debe ir primero
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'predictor.urls'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'DeepBDE API',
    'DESCRIPTION': (
        'API for Bond Dissociation Energy (BDE) prediction using DeepBDE machine learning model.\n'
        'Based on research from https://github.com/MSRG/DeepBDE/.\n\n'
        
        '## API Workflow (English)\n\n'
        '### Step 1: Get Molecule Information\n'
        '**POST** `/api/v1/predict/info/` - Get molecule 2D structure, atoms, and bonds information\n'
        '- Input: SMILES string\n'
        '- Output: Canonical SMILES, SVG image, atoms/bonds coordinates, molecule ID\n\n'
        
        '### Step 2: Get Canonical SMILES (Optional)\n'
        '**POST** `/api/v1/predict/info-smile-canonical/` - Get canonical SMILES and molecule ID\n'
        '- Input: SMILES string\n'
        '- Output: Canonical SMILES with explicit hydrogens and unique molecule ID\n\n'
        
        '### Step 3: Predict BDE for Bonds\n'
        '**Single Bond**: **POST** `/api/v1/predict/single/` - Predict BDE for one specific bond\n'
        '**Multiple Bonds**: **POST** `/api/v1/predict/multiple/` - Predict BDE for multiple bonds\n'
        '**All Bonds**: **POST** `/api/v1/infer/all/` - Predict BDE for all fragmentable bonds\n\n'
        
        '### Step 4: Fragment Analysis\n'
        '**POST** `/api/v1/BDEEvaluate/` - Generate molecular fragments in SMILES or XYZ format\n'
        '**POST** `/api/v1/ObtainBDEFragments/` - Find bond that generates specific fragments\n'
        '**POST** `/api/v1/predict/check/` - Verify fragments generated by bond cleavage\n\n'
        
        '### Step 5: Generate Reports\n'
        '**POST** `/api/v1/download_report/` - Download complete BDE analysis report in TXT format\n\n'
        
        '### Additional Endpoints\n'
        '**GET** `/api/v1/health/` - Health check endpoint\n'
        '**GET** `/api/schema/` - OpenAPI schema (YAML/JSON)\n'
        '**GET** `/api/docs/` - Interactive Swagger documentation\n'
        '**GET** `/api/redoc/` - ReDoc documentation\n\n'
        
        '---\n\n'
        
        '## Flujo de Uso de la API (Español)\n\n'
        '### Paso 1: Obtener Información de la Molécula\n'
        '**POST** `/api/v1/predict/info/` - Obtener estructura 2D, átomos y enlaces de la molécula\n'
        '- Entrada: Cadena SMILES\n'
        '- Salida: SMILES canónico, imagen SVG, coordenadas de átomos/enlaces, ID de molécula\n\n'
        
        '### Paso 2: Obtener SMILES Canónico (Opcional)\n'
        '**POST** `/api/v1/predict/info-smile-canonical/` - Obtener SMILES canónico e ID de molécula\n'
        '- Entrada: Cadena SMILES\n'
        '- Salida: SMILES canónico con hidrógenos explícitos e ID único de molécula\n\n'
        
        '### Paso 3: Predecir BDE para Enlaces\n'
        '**Enlace Individual**: **POST** `/api/v1/predict/single/` - Predecir BDE para un enlace específico\n'
        '**Múltiples Enlaces**: **POST** `/api/v1/predict/multiple/` - Predecir BDE para múltiples enlaces\n'
        '**Todos los Enlaces**: **POST** `/api/v1/infer/all/` - Predecir BDE para todos los enlaces fragmentables\n\n'
        
        '### Paso 4: Análisis de Fragmentos\n'
        '**POST** `/api/v1/BDEEvaluate/` - Generar fragmentos moleculares en formato SMILES o XYZ\n'
        '**POST** `/api/v1/ObtainBDEFragments/` - Encontrar enlace que genera fragmentos específicos\n'
        '**POST** `/api/v1/predict/check/` - Verificar fragmentos generados por escisión de enlace\n\n'
        
        '### Paso 5: Generar Reportes\n'
        '**POST** `/api/v1/download_report/` - Descargar reporte completo de análisis BDE en formato TXT\n\n'
        
        '### Endpoints Adicionales\n'
        '**GET** `/api/v1/health/` - Endpoint de verificación de salud\n'
        '**GET** `/api/schema/` - Esquema OpenAPI (YAML/JSON)\n'
        '**GET** `/api/docs/` - Documentación interactiva Swagger\n'
        '**GET** `/api/redoc/` - Documentación ReDoc\n\n'
        
        '## Technical Notes / Notas Técnicas\n\n'
        '- Only single, non-cyclic bonds can be predicted / Solo enlaces simples y no cíclicos pueden ser predichos\n'
        '- BDE values are returned in kcal/mol / Los valores BDE se devuelven en kcal/mol\n'
        '- Molecule IDs are SHA256 hashes (16 chars) / Los IDs de molécula son hashes SHA256 (16 caracteres)\n'
        '- Supports SMILES input with automatic canonicalization / Soporta entrada SMILES con canonicalización automática\n'
        '- Caching system for improved performance / Sistema de caché para mejor rendimiento\n'
    ),
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'LANGUAGES': [
        ('en', 'English'),
        ('es', 'Español'),
    ],
    'SCHEMA_COERCE_METHOD_NAMES': {
        'retrieve': 'get',
        'create': 'post',
        'update': 'put',
        'partial_update': 'patch',
        'destroy': 'delete',
    },
}

# ========== CONFIGURACIÓN CORS ==========
# Permitir todos los orígenes cuando DEBUG=True (solo desarrollo)
CORS_ALLOW_ALL_ORIGINS = DEBUG

# Orígenes permitidos en entornos staging/producción
CORS_ALLOWED_ORIGINS = [
    origin.strip()
    for origin in os.getenv('CORS_ALLOWED_ORIGINS', '').split(',')
    if origin.strip()
] or [
    'http://localhost:4200',
    'https://test1.guzman-lopez.com',
]

# Permitir envío de cookies / credenciales
CORS_ALLOW_CREDENTIALS = True

# Añadir cualquier header extra que necesites
CORS_ALLOW_HEADERS = list(default_headers) + [
    # 'X-My-Custom-Header',
]
# =======================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'predictor.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-us'

# Idiomas disponibles (solo inglés y español)
LANGUAGES = [
    ('en', 'English'),
    ('es', 'Español'),
]

TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
